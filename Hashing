import java.util.*;
public class Main {
    public static void main(String[] args) {
       HashMap<String,String>map=new HashMap();
        
        
        //insertion
        map.put("TN","Tamilnadu");
        map.put("kL","Kerala");
        map.put("KA","Karnataka");
        map.put("MP","Madhya pradesh");
        
        //search
        System.out.println(map.get("TN"));
        System.out.println(map.get("KA"));
        System.out.println(map.getOrDefault("AP","Not found"));
        
        //remove
        System.out.println(map.remove("MP"));
        
        for(String key : map.keySet()){
              System.out.println(key + " " +map.get(key));}
            
         System.out.println( map.containsKey("AP"));
         System.out.println( map.containsValue("Tamilnadu"));
        
         System.out.println( map.size());
          System.out.println( map.isEmpty());
     
    }
}



// common elements
import java.util.*;

class Solution {
    public int[] findIntersectionValues(int[] nums1, int[] nums2) {
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        
        for (int i : nums1) {
            set1.add(i);
        }
        for (int i : nums2) {
            set2.add(i);
        }
        
        int count1 = 0;
        for (int i : nums1) {
            if (set2.contains(i)) {  // Removed unnecessary semicolon
                count1++;
            }
        }

        int count2 = 0;
        for (int i : nums2) {
            if (set1.contains(i)) {  // Removed unnecessary semicolon
                count2++;
            }
        }
        
        return new int[]{count1, count2};  // Added return statement
    }
}


//Duplicate

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        
        HashMap<Integer,Integer>map=new HashMap<>();

        for(int i:nums){
            if(map.containsKey(i)){
                int count=map.get(i);
                map.put(i,count+1);
            }else{
                map.put(i,1);
            }
        }
            List<Integer>duplicates=new ArrayList<>();

            for(int i:map.keySet()){
                if(map.get(i)==2)
                   duplicates.add(i);
            }
        
        return duplicates;
    } 
}
